{"version":3,"sources":["components/Sidebar.js","components/Today.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","className","Today","useState","tasks","data","setData","useEffect","fetchData","a","axios","result","setInterval","first_four","task","display","push","map","key","desc","complete","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAmBeA,MAhBf,SAAiBC,GACb,OAAO,yBAAKC,UAAU,kCACtB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,iBAAf,aACA,yBAAKA,UAAU,iBAAf,0BAEA,yBAAKA,UAAU,iBAAgB,6BAA/B,sEACA,yBAAKA,UAAU,iBAAgB,6BAA/B,sE,yDCgDSC,MApDf,SAAeF,GAAQ,IAAD,EAEIG,mBAAS,CAAEC,MAAO,KAFtB,mBAEbC,EAFa,KAEPC,EAFO,KAIpBC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACMC,IAAM,gBADZ,OACTC,EADS,OAIhBL,EAAQK,EAAON,MAJC,2CAAH,qDAOfO,YAAYJ,EAAW,KACvBA,MACC,IAEF,IAhBmB,EAgBfK,EAAa,GAhBE,cAkBDR,EAAKD,OAlBJ,IAkBpB,2BAA+B,CAAC,IAArBU,EAAoB,QAC7B,GAAGA,EAAKC,QAEN,GADYF,EAAWG,KAAKF,IACf,EACX,OAtBc,8BA2BpB,OAAO,yBAAKb,UAAU,kCAClB,6BACE,yBAAKA,UAAU,aAAf,iCAGE,yBAAKA,UAAU,oBACb,4BACIY,EAAWI,KAAI,SAAAH,GAAI,OACnB,wBAAII,IAAKJ,EAAKK,MACbL,EAAKM,SACF,gCAASN,EAAKK,MACd,8BAAOL,EAAKK,e,MC3BjBE,MAVf,WACE,OAEE,yBAAKC,GAAG,SAASrB,UAAU,UACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.04a8af6c.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Sidebar(props) {\n    return <div className=\"sidebar pure-u-1 pure-u-md-1-4\">\n    <div className=\"header\">\n      <div className=\"brand-tagline\">LiveDebug</div>\n      <div className=\"brand-tagline\">https://livedebug.dev/</div>\n\n      <div className=\"brand-tagline\"><br />Chill, lurk or AMA on debugging, management, software or anything.</div>\n      <div className=\"brand-tagline\"><br />Say hi! Suggest something to debug in chat, twitter or discord.</div>\n    </div>\n\n    </div>\n    ;\n\n\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport axios from 'axios';\nimport { useState,useEffect } from 'react';\n\n\n\nfunction Today(props) {\n\n  const [data, setData] = useState({ tasks: [    ]});\n\n  useEffect(() => {\n    const fetchData = async () => {\n       const result = await axios(\n        `/target.json`,\n      );\n      setData(result.data);\n    };\n\n    setInterval(fetchData, 5000);\n    fetchData();\n  }, []);\n\n   let first_four = [];\n  // Subset target with the first 4 to be displayed.\n  for (const task of data.tasks) {\n    if(task.display) {\n      let count = first_four.push(task);\n      if (count >= 4) {\n        break;\n      }\n    }\n  }\n\n  return <div className=\"content pure-u-1 pure-u-md-3-4\">\n      <div>\n        <div className=\"post-meta\">\n          Targets for today's Twitch...\n          </div>\n          <div className=\"post-description\">\n            <ul>\n              { first_four.map(task => (\n                <li key={task.desc}>\n                {task.complete\n                  ? <strike>{task.desc}</strike>\n                  : <span>{task.desc }</span>\n                }\n                </li>\n                ))\n              }\n            </ul>\n          </div>\n        </div>\n      </div>;\n}\n\n\n\n\nexport default Today;\n","import React from 'react';\nimport Sidebar from './components/Sidebar';\nimport Today from './components/Today';\nimport './App.css';\n\n\n\nfunction App() {\n  return (\n\n    <div id=\"layout\" className=\"pure-g\">\n      <Sidebar />\n      <Today />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}